package com.nelsw.euler;

import lombok.extern.log4j.Log4j2;
import org.apache.commons.math3.primes.Primes;

import java.time.Duration;
import java.time.Instant;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

/**
 * Highly Divisible Triangular Number
 * <p>
 * <p>
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * <p>
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * <p>
 * The first ten terms would be 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * <p>
 * Let us list the factors of the first seven triangle numbers:
 * <p>
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * <p>
 * We can see that 28 is the first triangle number to have over five divisors.
 * <p>
 * What is the value of the first triangle number to have over five hundred divisors?
 */
@Log4j2
public class Problem12 {

    public Problem12() {

        var then = Instant.now();

        var actual   = solve();
        var expected = 76576500;

        if (actual == expected) {
            log.info("✅ - {} - {}", Duration.between(then, Instant.now()), actual);
        } else {
            log.warn("❌ - expected=[{}] actual=[{}]", expected, actual);
        }
    }

    private int solve() {

        int divisors = 0;
        int number   = 0;
        int triangle = 0;

        while (divisors < 500) {
            ++number;
            triangle += number;
            if (triangle < 3) {
                continue;
            }
            Set<Integer> divisorSet = new HashSet<>(Collections.singletonList(1));
            for (Integer primeFactor : Primes.primeFactors(triangle)) {
                Set<Integer> divisorSubSet = new HashSet<>();
                for (Integer d : divisorSet) {
                    divisorSubSet.add(d * primeFactor);
                }
                divisorSet.addAll(divisorSubSet);
            }
            divisors = divisorSet.size();
        }

        return triangle;
    }

}
